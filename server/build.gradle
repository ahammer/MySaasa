apply plugin: 'java'
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'application'
apply plugin: "jacoco"

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination = "${buildDir}/jacocoHtml"
    }
}
mainClassName = "com.mysaasa.StartDaemon"


def Properties versionProps = new Properties()

def versionPropsFile = file('version.properties')
if(versionPropsFile.exists())
    versionProps.load(new FileInputStream(versionPropsFile))
def code = (versionProps['VERSION_CODE'] ?: "0").toInteger() + 1
versionProps['VERSION_CODE'] = code.toString()
versionProps.store(versionPropsFile.newWriter(), null)


group = 'com.mysaasa'
version = '0.5.'+versionProps['VERSION_CODE']
description = """mysaasa Server"""

spotless {
    java {
        eclipseFormatFile 'spotless.eclipseformat.xml'  // XML file dumped out by the Eclipse formatter
    }
}


compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.compilerArgs << '-parameters'
    options.fork = true
    options.forkOptions.executable = 'javac'
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.compilerArgs << '-parameters'
    options.fork = true
    options.forkOptions.executable = 'javac'
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }

        resources {
            srcDir 'src/main/resources'
            srcDir 'src/main/java'
        }
    }
}

repositories {
    mavenCentral()
    maven { url "http://repo.jfrog.org/artifactory/plugins-releases"}
    maven { url "http://mvnrepository.com"}
}

dependencies {
    compile 'org.eclipse.jetty.aggregate:jetty-all:9.2.9.v20150224'
    compile 'javax.websocket:javax.websocket-api:1.1'
    compile 'org.reflections:reflections:0.9.11'
    compile 'org.apache.httpcomponents:httpclient:4.5.5'
    compile 'org.apache.commons:commons-exec:1.3'
    compile 'org.apache.commons:commons-io:1.3.2'
    compile 'org.apache.velocity:velocity:1.7'
    compile 'com.google.inject:guice:3.0'
    compile 'com.google.guava:guava:+'
    compile 'com.google.code.gson:gson:+'
    compile 'org.hibernate:hibernate-core:5.+'
    compile 'org.hibernate:hibernate-entitymanager:5.+'
    compile 'com.h2database:h2:1.+'
    compile 'com.googlecode.juniversalchardet:juniversalchardet:1.+'
    compile 'org.mockito:mockito-core:1.+'
    compile 'org.slf4j:slf4j-log4j12:1.+'
    compile 'log4j:log4j:1.+'
    compile 'net.lingala.zip4j:zip4j:1.+'
    compile 'net.glxn:qrgen:+'
    compile 'org.bitcoinj:bitcoinj-core:+'
    compile 'com.googlecode.json-simple:json-simple:1.1'
    compile 'com.stripe:stripe-java:1.26.0'
    compile 'org.eclipse.jetty.websocket:websocket-server:9.2.+'
    compile 'javax.websocket:javax.websocket-api:1.0'
    compile 'log4j:log4j:1.+'
    compile ('org.apache.wicket:wicket-native-websocket-javax:7.+')
    compile group: 'org.apache.wicket', name: 'wicket-core', version:'7.+'
    compile group: 'org.apache.wicket', name: 'wicket-extensions', version:'7.+'
    compile group: 'org.apache.wicket', name: 'wicket-native-websocket-core', version:'7.+'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-daemon:commons-daemon:1.0.15'
    compile 'javax.mail:mail:1.4.1'
    testCompile 'junit:junit:4.10'
}


/**
 * We need to find the files from the subprojects, and include them in the builds
 *
 * So we get all the project dependencies
 * Then we collect some folders, and flatten the array.
 * What we get is a list of paths that we want to copy files from
 */

task copySrc(type:Copy) {
    into "$buildDir/src/main/webapp"
    from "src/deployment/webapp"
    from "src/main/webapp"
    from "src/main/java"
}

build.dependsOn copySrc
run.dependsOn build

tasks.run.workingDir = "$buildDir"

applicationDistribution.from(copySrc) {
    into "bin/src/main/webapp"
}

