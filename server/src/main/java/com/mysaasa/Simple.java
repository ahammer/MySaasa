package com.mysaasa;

import com.google.inject.Injector;

import com.mysaasa.core.ModuleManager;
import com.mysaasa.core.setup.Setup;
import com.mysaasa.development.CodeGen;
import com.mysaasa.injection.SimpleGuiceModuleImpl;
import com.mysaasa.interfaces.IClassPanelAdapter;
import com.mysaasa.pages.Splash;
import com.mysaasa.pages.docs.api.ApiGuide;
import com.mysaasa.pages.docs.template.TemplateGuide;
import com.mysaasa.core.AbstractModule;

import org.apache.wicket.event.IEvent;
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.protocol.http.WebApplication;
import org.apache.wicket.protocol.https.HttpsConfig;
import org.slf4j.Logger;

import javax.persistence.EntityManager;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

/**
 * The "global" portion of the application.
 * There is only one instance, and it stores some configs and statics that are global
 *
 * This class only bootstraps the application, and deals with global config helpers
 *
 * Created by Adam on 3/30/14.
 */
public abstract class Simple extends WebApplication {
	private static Simple INSTANCE;
	public static boolean IN_MEMORY_DATABASE;

	protected SimpleGuiceModuleImpl simpleGuiceModule;
	protected final Logger logger = org.slf4j.LoggerFactory.getLogger(SimpleImpl.class);
	private ModuleManager moduleManager;

	public boolean isInitialized() {
		return initialized;
	}

	private boolean initialized = false;


	/**
	 * Such a simple, no args-constructor.
	 */
	public Simple() {
		INSTANCE = this;
	}


	/**
	 * Get's this, there is only one Application class, and it's a singleton, so this is access
	 * to the cast version of it. Ultimately it's a convenience so we don't need to do unsafe
	 * casts everywhere.
	 *
	 * @return this singleton
	 */
	public static Simple getInstance() {
		return INSTANCE;
	}

	/**
	 * This is a shortcut to the EntityManager
	 *
	 * @return the entity manager
	 */
	@Deprecated
	public static EntityManager getEntityManager() {
		return Simple.getInstance().getInjector().getProvider(EntityManager.class).get();
	}

	/**
	 * Dependency injection yay.
	 *
	 * @return the Guice injector
	 */
	public abstract Injector getInjector();

	/**
	 * Global logging instance
	 * @return the logger
	 */
	public Logger getLogger() {
		return logger;
	}

	/**
	 * Checks the two properties for setup, userInitialized and dbInitialized
	 * These are optimizations
	 *
	 * @return True if setup correctly, with a root user/organization and
	 */
	public boolean hasBeenInstalled() {
		Properties p = DefaultPreferences.getProperties();

		return p.keySet().size() > 0;
	}

	public Map<String, String> getEntityManagerFactoryPropertyMap() {
		if (DefaultPreferences.getProperties().getProperty(DefaultPreferences.PREF_DB_URL) == null || DefaultPreferences.getProperties().getProperty(DefaultPreferences.PREF_DB_PASS) == null || DefaultPreferences.getProperties().getProperty(DefaultPreferences.PREF_DB_USERNAME) == null || DefaultPreferences.getProperties().getProperty(DefaultPreferences.PREF_DB_DRIVER) == null) {
			throw new IllegalStateException("Database has not been set up yet");
		}

		Map<String, String> map = new HashMap<>();

		//Could be reduced with cohesion of arguments
		String url = DefaultPreferences.getProperties().getProperty(DefaultPreferences.PREF_DB_URL);
		String driver = DefaultPreferences.getProperties().getProperty(DefaultPreferences.PREF_DB_DRIVER);
		String username = DefaultPreferences.getProperties().getProperty(DefaultPreferences.PREF_DB_USERNAME);
		String password = DefaultPreferences.getProperties().getProperty(DefaultPreferences.PREF_DB_PASS);

		if (IN_MEMORY_DATABASE) {
			url = "jdbc:h2:mem:";
		}
		map.put("javax.persistence.jdbc.url", url);
		map.put("javax.persistence.jdbc.driver", driver);
		map.put("javax.persistence.jdbc.user", username);
		map.put("javax.persistence.jdbc.password", password);
		return map;
	}

	private String getPropertiesFilePath() {
		return DefaultPreferences.getConfigPath() + "/" + DefaultPreferences.SETTINGS_FILE;
	}

	/**
	 *  Saves the properties files, if you have modified them call this and it'll write the new ones to disk.
	 */
	public void saveProperties() {
		try {
			DefaultPreferences.getProperties().store(new FileOutputStream(getPropertiesFilePath()), "Generated by Setup - Don't touch if you don't know why");
		} catch (IOException e) {
			e.printStackTrace();
			throw new RuntimeException("Can not save the properties file", e);
		}
	}

	@Override
	public void init() {
		super.init();

		moduleManager = new ModuleManager();
		getMarkupSettings().setStripWicketTags(true);
		// IMPORTANT!
		mountPage("/Admin", Splash.class);
		mountPage("/ApiGuide", ApiGuide.class);
		mountPage("/TemplateGuide", TemplateGuide.class);

		getRootRequestMapperAsCompound().add(new MysaasaRequestMapper());
		HttpsConfig config = new HttpsConfig();
		config.setHttpsPort(DefaultPreferences.getSecurePort());

		CodeGen.generateRetrofitCode();
		new SSLGen().doSSLMagic();
		initialized = true;

	}

	@Override
	public void onEvent(IEvent<?> event) {
		for (final AbstractModule m : moduleManager.getModules()) {
			m.onEvent(event);
		}
	}

	@Override
	public Class<? extends WebPage> getHomePage() {

		if (hasBeenInstalled()) {
			return null;
		} else {
			return Setup.class;
		}

	}

	public IClassPanelAdapter getClassPanelAdapter(Class aClass) {
		return moduleManager.getClassPanelAdapter(aClass);
	}

	//Can set before this starts
	protected void setOfflineMode(boolean b) {
		this.IN_MEMORY_DATABASE = b;
	}
}
